//
//  PokeDexViewController.swift
//  PokedexBCI
//
//  Created Irwin Bravo Oporto on 1/04/25.
//  Template generated by Nishi
//

import UIKit
import Lottie

class PokeDexViewController: UIViewController {
    
    // MARK: - Properties
    var presenter: PokeDexPresenterProtocol?
    let mainView = PokeDexView()
    private let loadingIndicator = UIActivityIndicatorView(style: .large)
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupLoadingIndicator()
        setupDelegates()
        presenter?.viewDidLoad()
    }
    
    // MARK: - Setup
    private func setupView() {
        view = mainView
    }
    
    private func setupLoadingIndicator() {
        loadingIndicator.color = .white
        loadingIndicator.hidesWhenStopped = true
        loadingIndicator.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(loadingIndicator)
        
        NSLayoutConstraint.activate([
            loadingIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            loadingIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    private func setupDelegates() {
        mainView.searchBar.delegate = self
        mainView.collectionView.delegate = self
        mainView.collectionView.dataSource = self
        mainView.cancelButton.addTarget(self, action: #selector(cancelSearch), for: .touchUpInside)
    }
    
    // MARK: - Actions
    @objc private func cancelSearch() {
        mainView.searchBar.text = ""
        mainView.searchBar.resignFirstResponder()
        presenter?.cancelSearch()
    }
}

// MARK: - PokeDexViewProtocol
extension PokeDexViewController: PokeDexViewProtocol {
    
    func showLoading() {
        DispatchQueue.main.async {
            self.loadingIndicator.startAnimating()
            self.view.bringSubviewToFront(self.loadingIndicator)
        }
    }
    
    func hideLoading() {
        DispatchQueue.main.async {
            self.loadingIndicator.stopAnimating()
        }
    }
    
    func showError(message: String) {
        DispatchQueue.main.async {
            let alert = UIAlertController(
                title: "Error",
                message: message,
                preferredStyle: .alert
            )
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            self.present(alert, animated: true)
        }
    }
    
    func showPokemons(_ pokemons: [ResultPokeDex]) {
        mainView.collectionView.reloadData()
    }
    
    func updateSearchResults(_ results: [ResultPokeDex]) {
        mainView.collectionView.reloadData()
    }
    
    func playBackgroundAnimation() {
        DispatchQueue.main.async {
            self.mainView.animationView.animation = LottieAnimation.named(AppLocalized.AnimationBackgroundPokedex)
            self.mainView.animationView.play()
        }
    }
    
    func reloadCollectionView() {
        mainView.collectionView.reloadData()
    }
}

// MARK: - UISearchBarDelegate
extension PokeDexViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        presenter?.searchPokemon(with: searchText)
    }
}

// MARK: - UICollectionViewDataSource
extension PokeDexViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter?.numberOfPokemons ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(
            withReuseIdentifier: PokemonCollectionViewCell.reuseIdentifier,
            for: indexPath) as? PokemonCollectionViewCell,
            let pokemon = presenter?.pokemon(at: indexPath.row) else {
                return UICollectionViewCell()
        }
        
        cell.configure(with: pokemon)
        return cell
    }
}

// MARK: - UICollectionViewDelegate
extension PokeDexViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter?.didSelectPokemon(at: indexPath.row)
    }
}

// MARK: - UICollectionViewDelegateFlowLayout
extension PokeDexViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView,
                      layout collectionViewLayout: UICollectionViewLayout,
                      sizeForItemAt indexPath: IndexPath) -> CGSize {
        let padding: CGFloat = 20
        let collectionViewSize = collectionView.frame.size.width - padding * 2
        let widthPerItem = collectionViewSize / 3
        return CGSize(width: widthPerItem, height: widthPerItem + 20)
    }
    
    func collectionView(_ collectionView: UICollectionView,
                      layout collectionViewLayout: UICollectionViewLayout,
                      minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 8
    }
    
    func collectionView(_ collectionView: UICollectionView,
                      layout collectionViewLayout: UICollectionViewLayout,
                      minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 12
    }
    
    func collectionView(_ collectionView: UICollectionView,
                      layout collectionViewLayout: UICollectionViewLayout,
                      insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
    }
}
