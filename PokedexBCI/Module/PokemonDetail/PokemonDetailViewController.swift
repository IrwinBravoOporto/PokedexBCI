//
//  PokemonDetailViewController.swift
//  PokedexBCI
//
//  Created Irwin Bravo Oporto on 2/04/25.
//  Template generated by Nishi
//

import UIKit

class PokemonDetailViewController: UIViewController {
    var presenter: PokemonDetailPresenterProtocol?
    let mainView = PokemonDetailView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view = mainView
        presenter?.viewDidLoad()
        setupNavigationBar()
    }
    
    private func setupNavigationBar() {
        // Ocultar el bot贸n de retroceso por defecto
        navigationItem.hidesBackButton = true
        
        // Configuraci贸n del bot贸n personalizado con imagen de retroceso
        let backImage = UIImage(systemName: "chevron.backward") // Imagen por defecto
        let customBackButton = UIBarButtonItem(
            image: backImage,
            style: .plain,
            target: self,
            action: #selector(backButtonTapped)
        )
        customBackButton.tintColor = .black // Color del bot贸n
        navigationItem.leftBarButtonItem = customBackButton
        
        // Estilo del Navigation Bar
        navigationController?.navigationBar.barTintColor = .white // Fondo blanco
        navigationController?.navigationBar.titleTextAttributes = [
            .foregroundColor: UIColor.black
        ]
    }

    @objc private func backButtonTapped() {
        navigationController?.popViewController(animated: true)
    }

}

extension PokemonDetailViewController: PokemonDetailViewProtocol {
    func showPokemonDetail(_ detail: PokemonDetail) {
        DispatchQueue.main.async {
            self.mainView.configure(with: detail)
            self.title = detail.name.capitalized
        }
    }
    
    func showLoading() {
        DispatchQueue.main.async {
            self.mainView.loadingIndicator.startAnimating()
        }
    }
    
    func hideLoading() {
        DispatchQueue.main.async {
            self.mainView.loadingIndicator.stopAnimating()
        }
    }
    
    func showError(message: String) {
        DispatchQueue.main.async {
            let alert = UIAlertController(title: "Error", message: message, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            self.present(alert, animated: true)
        }
    }
}
